{"version":3,"file":"git-tag.js","sourceRoot":"","sources":["git-tag.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;IAC/C,MAAM,CAAC,GAAG,IAAI,CAAC;QACb,KAAK,EAAE;;;;;;;;;KASN;KACF,CAAC;SACC,IAAI,CAAC;QACJ,IAAI,EAAE;YACJ,KAAK,EAAE,GAAG;YACV,WAAW,EAAE,gBAAgB;SAC9B;KACF,CAAC;SACD,GAAG,CAAC;QACH,CAAC,EAAE;YACD,IAAI,EAAE,GAAG;YACT,WAAW,EAAE,qCAAqC;SACnD;KACF,CAAC;SACD,IAAI,CAAC;QACJ,MAAM,EAAE;YACN,KAAK,EAAE,GAAG;YACV,WAAW,EAAE,aAAa;SAC3B;KACF,CAAC;SACD,IAAI,CAAC;QACJ,MAAM,EAAE;YACN,KAAK,EAAE,GAAG;YACV,WAAW,EAAE,aAAa;YAC1B,MAAM,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;SACzB;KACF,CAAC;SACD,IAAI,CAAC;QACJ,IAAI,EAAE;YACJ,KAAK,EAAE,GAAG;SACX;KACF,CAAC;SACD,WAAW,CAAC,sBAAsB,CAAC;SACnC,IAAI,CAAC;QACJ,QAAQ,EAAE;YACR,KAAK,EAAE,GAAG;YACV,WAAW,EAAE,gCAAgC;SAC9C;KACF,CAAC;SACD,GAAG,CAAC;QACH,OAAO,EAAE;YACP,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,SAAS;YACf,WAAW,EAAE,aAAa;SAC3B;QACD,IAAI,EAAE;YACJ,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE,wBAAwB;SACtC;KACF,CAAC;SACD,IAAI,CAAC;QACJ,IAAI,EAAE;YACJ,KAAK,EAAE,GAAG;YACV,WAAW,EAAE,8BAA8B;SAC5C;KACF,CAAC;SACD,GAAG,CAAC;QACH,OAAO,EAAE;YACP,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE,gDAAgD;SAC9D;QACD,YAAY,EAAE;YACZ,KAAK,EAAE,GAAG;YACV,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,iCAAiC;SAC/C;KACF,CAAC;SACD,IAAI,CAAC;QACJ,KAAK,EAAE;YACL,KAAK,EAAE,GAAG;YACV,WAAW,EAAE,2BAA2B;SACzC;KACF,CAAC;SACD,WAAW,CAAC,qBAAqB,CAAC;SAClC,GAAG,CAAC;QACH,MAAM,EAAE;YACN,IAAI,EAAE,OAAO;YACb,WAAW,EAAE,0BAA0B;SACxC;QACD,IAAI,EAAE;YACJ,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE,WAAW;SACzB;QACD,QAAQ,EAAE;YACR,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,yCAAyC;SACvD;QACD,WAAW,EAAE;YACX,IAAI,EAAE,QAAQ;YACd,WAAW,EAAE,+BAA+B;SAC7C;KACF,CAAC,CAAA;IACJ,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,CAAC,CAAC,KAAK,EAAE,CAAA;IACzC,IAAI,MAAM,CAAC,IAAI;QAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAA;;QAClC,OAAO,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,CAAC,CAAA;AAC3C,CAAC,CAAC,CAAA","sourcesContent":["import('../dist/esm/index.js').then(({ jack }) => {\n  const j = jack({\n    usage: `\ngit tag [-a | -s | -u <key-id>] [-f] [-m <msg> | -F <file>] [-e]\n               <tagname> [<commit> | <object>]\n   or: git tag -d <tagname>...\n   or: git tag [-n[<num>]] -l [--contains <commit>] [--no-contains <commit>]\n               [--points-at <object>] [--column[=<options>] | --no-column]\n               [--create-reflog] [--sort=<key>] [--format=<format>]\n               [--merged <commit>] [--no-merged <commit>] [<pattern>...]\n   or: git tag -v [--format=<format>] <tagname>...\n    `,\n  })\n    .flag({\n      list: {\n        short: 'l',\n        description: 'list tag names',\n      },\n    })\n    .opt({\n      n: {\n        hint: 'n',\n        description: 'print <n> lines of each tag message',\n      },\n    })\n    .flag({\n      delete: {\n        short: 'd',\n        description: 'delete tags',\n      },\n    })\n    .flag({\n      verify: {\n        short: 'v',\n        description: 'verify tags',\n        negate: { hidden: true },\n      },\n    })\n    .flag({\n      help: {\n        short: 'h',\n      },\n    })\n    .description('Tag creation options')\n    .flag({\n      annotate: {\n        short: 'a',\n        description: 'annotated tag, needs a message',\n      },\n    })\n    .opt({\n      message: {\n        short: 'm',\n        hint: 'message',\n        description: 'tag message',\n      },\n      file: {\n        short: 'F',\n        hint: 'file',\n        description: 'read message from file',\n      },\n    })\n    .flag({\n      sign: {\n        short: 's',\n        description: 'annotated and GPG-signed tag',\n      },\n    })\n    .opt({\n      cleanup: {\n        hint: 'mode',\n        description: 'how to strip spaces and #comments from message',\n      },\n      'local-user': {\n        short: 'u',\n        hint: 'key-id',\n        description: 'use another key to sign the tag',\n      },\n    })\n    .flag({\n      force: {\n        short: 'f',\n        description: 'replace the tag if exists',\n      },\n    })\n    .description('Tag listing options')\n    .opt({\n      column: {\n        hint: 'style',\n        description: 'show tag list in columns',\n      },\n      sort: {\n        hint: 'type',\n        description: 'sort tags',\n      },\n      contains: {\n        hint: 'commit',\n        description: 'print only tags that contain the commit',\n      },\n      'points-at': {\n        hint: 'object',\n        description: 'print only tags of the object',\n      },\n    })\n  const { values, positionals } = j.parse()\n  if (values.help) console.log(j.usage())\n  else console.log({ values, positionals })\n})\n"]}